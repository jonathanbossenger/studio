# Nodes with values to reuse in the pipeline.
common_params:
  plugins: &common_plugins
    - $CI_TOOLKIT_PLUGIN
    - $NVM_PLUGIN

# IMAGE_ID is an env var that only macOS agents need.
# Defining it at the root level propagates it too all agents, which can seem unnecessary but is a the same time convenient and DRY.
env:
  IMAGE_ID: $IMAGE_ID

steps:
  - label: Lint
    key: lint
    command: |
      .buildkite/commands/install-node-dependencies.sh
      echo '--- :eslint: Lint'
      npm run lint
    plugins: *common_plugins
    notify:
      - github_commit_status:
          context: Lint

  - label: Unit Tests
    key: unit_tests
    command: |
      .buildkite/commands/install-node-dependencies.sh
      echo '--- :npm: Run Unit Tests'
      npm run test
    plugins: *common_plugins
    notify:
      - github_commit_status:
          context: Unit Tests

  - label: Windows Unit Tests
    command: |
      bash .buildkite/commands/install-node-dependencies.sh
      echo '--- :npm: Run Unit Tests'
      npm run test
    agents:
      queue: windows
    plugins: *common_plugins
    notify:
      - github_commit_status:
          context: Windows Unit Tests

  # Notice that we use the queue name (matrix value) in the label.
  # We could have added values for queue and label, but that would have resulted in 'macOS + windows' and 'Windows + mac' combinations, which we don't want.
  # Buildkite offers an option to remove those combinations, but the overhead in code readability did not seem worth the visual effect in the build page.
  # See https://buildkite.com/docs/pipelines/build-matrix#removing-combinations-from-the-build-matrix
  - label: E2E Tests on {{matrix}}
    key: e2e_tests
    command: |
      # call with bash explicitly because we run this on Windows, too
      bash .buildkite/commands/install-node-dependencies.sh
      export IS_DEV_BUILD=true
      echo '--- :package: Package app for testing'
      npm run package
      echo '--- :playwright: Run End To End Tests'
      npm run e2e
    artifact_paths:
      - test-results/**/*.zip
    plugins: *common_plugins
    agents:
      queue: "{{matrix}}"
    env:
      # See https://playwright.dev/docs/ci#debugging-browser-launches
      DEBUG: "pw:browser"
    matrix:
      - mac
      #- windows
    notify:
      - github_commit_status:
          context: All E2E Tests

  - group: ðŸ“¦ Build for Mac
    key: dev-mac
    steps:
      - label: ðŸ”¨ Mac Dev Build - {{matrix}}
        agents:
          queue: mac
        command: |
          .buildkite/commands/prepare-environment.sh

          .buildkite/commands/install-node-dependencies.sh

          node ./scripts/prepare-dev-build-version.mjs

          export IS_DEV_BUILD=true

          echo "--- :node: Building Binary"
          npm run make:macos-{{matrix}}

          # Local trial and error show this needs to run before the DMG generation (obviously) but after the binary has been built
          echo "--- :hammer: Rebuild fs-attr if necessary before generating DMG"
          case {{matrix}} in
            universal | x64)
              echo "Rebuilding fs-xattr for {{matrix}} architecture"
              npm rebuild fs-xattr --cpu universal
              ;;
            arm64)
              echo "No need to rebuild fs-xattr because it works out of the box on Apple Silicon"
              ;;
            *)
              echo "^^^ +++ Unexpected architecture {{matrix}}"
              exit 1
              ;;
          esac

          echo "--- :node: Packaging in DMG"
          npm run make:dmg-{{matrix}}

          echo "--- ðŸ“ƒ Notarizing Binary"
          bundle exec fastlane notarize_binary
        plugins: *common_plugins
        artifact_paths:
          - out/**/*.app.zip
          - out/*.dmg
        matrix:
          - universal
          - x64
          - arm64
        notify:
          - github_commit_status:
              context: All Mac Dev Builds
    if: build.tag !~ /^v[0-9]+/

  - label: ðŸ”¨ Windows Dev Build
    key: dev-windows
    command: |
      $env:IS_DEV_BUILD="true"
      .buildkite/commands/build-for-windows-dev.ps1
      node scripts/package-appx.mjs
    artifact_paths:
      - out\**\studio-setup.exe
      - out\**\studio-update.nupkg
      - out\**\RELEASES
      - out\**\*.appx
    agents:
      queue: windows
    if: build.tag !~ /^v[0-9]+/
    notify:
      - github_commit_status:
          context: Windows Dev Build

  - label: ":rocket: Distribute Dev Builds"
    command: |
      echo "--- :node: Downloading Binaries"
      buildkite-agent artifact download "*.app.zip" .
      buildkite-agent artifact download "*.dmg" .
      buildkite-agent artifact download "*.exe" .
      buildkite-agent artifact download "*.nupkg" .
      buildkite-agent artifact download "*\\RELEASES" .

      .buildkite/commands/install-node-dependencies.sh

      export IS_DEV_BUILD=true

      echo "--- :node: Generating Release Manifest"
      node ./scripts/generate-releases-manifest.mjs

      echo "--- :fastlane: Distributing Dev Builds"
      install_gems
      bundle exec fastlane distribute_dev_build
    artifact_paths:
      - out/releases.json
    agents:
      queue: mac
    # Using concurrency_group to ensure the CI builds from `trunk` & the git tag, which are likely to run at roughly the
    # same time, don't run into a race condition when downloading+updating+uploading the `releases.json` file from/to S3
    concurrency_group: studio/release-manifest-update
    concurrency: 1
    concurrency_method: eager
    depends_on:
      - step: dev-mac
      - step: dev-windows
    plugins: *common_plugins
    if: build.branch == 'trunk' && build.tag !~ /^v[0-9]+/
    notify:
      - github_commit_status:
          context: Distribute Dev Builds

  - group: ðŸ“¦ Build for Mac
    key: release-mac
    steps:
      - label: ðŸ”¨ Mac Release Build - {{matrix}}
        agents:
          queue: mac
        command: |
          .buildkite/commands/prepare-environment.sh

          .buildkite/commands/install-node-dependencies.sh
          node ./scripts/confirm-tag-matches-version.mjs

          echo "--- :node: Building Binary"
          npm run make:macos-{{matrix}}

          # Local trial and error show this needs to run before the DMG generation (obviously) but after the binary has been built
          echo "--- :hammer: Rebuild fs-attr if necessary before generating DMG"
          case {{matrix}} in
            universal | x64)
              echo "Rebuilding fs-xattr for {{matrix}} architecture"
              npm rebuild fs-xattr --cpu universal
              ;;
            arm64)
              echo "No need to rebuild fs-xattr because it works out of the box on Apple Silicon"
              ;;
            *)
              echo "^^^ +++ Unexpected architecture {{matrix}}"
              exit 1
              ;;
          esac

          echo "--- :node: Packaging in DMG"
          npm run make:dmg-{{matrix}}

          echo "--- ðŸ“ƒ Notarizing Binary"
          bundle exec fastlane notarize_binary
        plugins: *common_plugins
        artifact_paths:
          - out/**/*.app.zip
          - out/*.dmg
        matrix:
          - universal
          - x64
          - arm64
        notify:
          - github_commit_status:
              context: All Mac Release Builds
    if: build.tag =~ /^v[0-9]+/

  - label: ðŸ”¨ Windows Release Build
    key: release-windows
    agents:
      queue: windows
    command: |
      .buildkite/commands/build-for-windows-release.ps1
      node scripts/package-appx.mjs
    artifact_paths:
      - out\**\studio-setup.exe
      - out\**\studio-update.nupkg
      - out\**\RELEASES
      - out\**\*.appx
    if: build.tag =~ /^v[0-9]+/
    notify:
      - github_commit_status:
          context: Windows Release Build

  - label: ":rocket: Publish Release Builds"
    command: |
      echo "--- :node: Downloading Binaries"
      buildkite-agent artifact download "*.zip" .
      buildkite-agent artifact download "*.dmg" .
      buildkite-agent artifact download "*.exe" .
      buildkite-agent artifact download "*.nupkg" .
      buildkite-agent artifact download "*\\RELEASES" .

      .buildkite/commands/install-node-dependencies.sh

      echo "--- :node: Generating Release Manifest"
      node ./scripts/generate-releases-manifest.mjs

      echo "--- :fastlane: Distributing Release Builds"
      install_gems
      bundle exec fastlane distribute_release_build
    artifact_paths:
      - out/releases.json
    agents:
      queue: mac
    # Using concurrency_group to ensure the CI builds from `trunk` & the git tag, which are likely to run at roughly the
    # same time, don't run into a race condition when downloading+updating+uploading the `releases.json` file from/to S3
    concurrency_group: studio/release-manifest-update
    concurrency: 1
    concurrency_method: eager
    depends_on:
      - step: release-mac
      - step: release-windows
    plugins: *common_plugins
    if: build.tag =~ /^v[0-9]+/
    notify:
      - github_commit_status:
          context: Publish Release Builds
